/*
 * The Blue Alliance Trusted APIv1
 *
 * # Overview Import FIRST Robotics Competition Data to The Blue Alliance. The API is accessed through POST requests made to the endpoints described below. To simplify the removal of incorrect data, most endpoints must be called with the full dataset. For example, there is no endpoint to add a single award-- only to update all awards. It must be called with all awards, and the ones that are no longer present will be deleted. **The exception to this is the matches endpoint**, where there are separate endpoints to update and delete matches. Also, the **match videos endpoint** only allows the addition (and not the removal) of videos. # Authentication The X-TBA-Auth-Id and X-TBA-Auth-Sig must be included as request headers in all requests.  *auth_id*: ``  *auth_secret*: ``  *X-TBA-Auth-Id*: `auth_id`  *X-TBA-Auth-Sig*: `md5_hexdigest()`  For example, an X-TBA-Auth-Sig may look like `md5_hexdigest(ExqeZK3Gbo9v95YnqmsiADzESo9HNgyhIOYSMyRpqJqYv13EazNRaDIPPJuOXrQp/api/trusted/v1/event/2014casj/matches/delete[\"qm1\"])`  Which, after hashing, becomes: `ca5c3e5c1b0e7132e4af13f805eca0be`
 *
 * The version of the OpenAPI document: 3.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Award {
    /// Type enum of the award. If null, this will be automatically determined from the name_str. See https://github.com/the-blue-alliance/the-blue-alliance/blob/py3/src/backend/common/consts/award_type.py
    #[serde(rename = "type_enum", skip_serializing_if = "Option::is_none")]
    pub type_enum: Option<i32>,
    /// Name of the award
    #[serde(rename = "name_str")]
    pub name_str: String,
    /// Key of the team winning this award. Formatted like `frcXXXX` where `XXXX` is the team number. Can be null
    #[serde(rename = "team_key", skip_serializing_if = "Option::is_none")]
    pub team_key: Option<String>,
    /// Name of the individual winning this award. Can be null
    #[serde(rename = "awardee", skip_serializing_if = "Option::is_none")]
    pub awardee: Option<String>,
}

impl Award {
    pub fn new(name_str: String) -> Award {
        Award {
            type_enum: None,
            name_str,
            team_key: None,
            awardee: None,
        }
    }
}

